Problem Title:
"Dynamic Distance Queries on a Weighted Tree"

ðŸ“œ Simplified Problem Statement:
You are given a tree of n nodes rooted at node 1, where each edge has a weight.
Youâ€™ll be given a list of queries, which can be of two types:

Update Query [1, u, v, w']
â†’ Update the weight of the edge between nodes u and v to w'.

Distance Query [2, x]
â†’ Find the shortest path distance (i.e., sum of edge weights) from node 1 (the root) to node x.

After processing all the queries, return a list of answers to all type-2 queries, in order.

ðŸ“¥ Input : n â€” number of nodes
          edges â€” list of n - 1 edges as [u, v, weight]
          queries â€” list of queries (each either [1, u, v, new_weight] or [2, x])

ðŸ“¤ Output : Return a list of integers where each integer is the answer to a query of type [2, x].

âœ… Example Input :
n = 3
edges = [[1, 2, 2], [1, 3, 4]]
queries = [
    [2, 1],           # Distance from 1 â†’ 1 (0)
    [2, 3],           # Distance from 1 â†’ 3 (4)
    [1, 1, 3, 7],     # Update edge (1, 3) to 7
    [2, 2],           # Distance from 1 â†’ 2 (2)
    [2, 3]            # Distance from 1 â†’ 3 (7)
]
âœ… Output : [0, 4, 2, 7]

#Approach 1 : 
Python3 :
from collections import defaultdict

class Solution:
    def treeQueries(self, n, edges, queries):  
        graph = defaultdict(dict) #I want a dictionary, where each key is a node, and its value is another dictionary of connected nodes and weights. And please, Python, automatically create an empty dictionary 
        for me if I forget to do it.
        
        # Build initial graph
        for u, v, w in edges: # Loop through each edge in the list , Unpack the endpoints and weight directly , Build the adjacency list efficiently
            graph[u][v] = w
            graph[v][u] = w # We fill the graph with edges. Since the tree is undirected, we store it both ways.

        result = [] # This list stores the answers for all type-2 queries [2, x]. Returns all answers in order
# graph	{1: {2: 2, 3: 7}, 2: {1: 2}, 3: {1: 7}} and result	[0, 4, 2, 7]

        def dfs(curr, target, visited, distance):
            if curr == target:
                return distance
            visited.add(curr)
            for neighbor in graph[curr]:
                if neighbor not in visited:
                    d = dfs(neighbor, target, visited, distance + graph[curr][neighbor])
                    if d != -1:
                        return d
            return -1  # Not reachable (should not happen in a tree)

        # Process each query
        for q in queries:
            if q[0] == 2:
                _, x = q
                dist = dfs(1, x, set(), 0)
                result.append(dist)
            elif q[0] == 1:
                _, u, v, new_w = q
                graph[u][v] = new_w
                graph[v][u] = new_w

        return result
