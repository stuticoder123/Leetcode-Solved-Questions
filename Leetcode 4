Question : 𝐒𝐪𝐮𝐚𝐝 𝐒𝐞𝐥𝐟𝐢𝐞 – 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐌𝐢𝐝𝐝𝐥𝐞 𝐅𝐢𝐥𝐭𝐞𝐫 💖

📸 𝐓𝐡𝐞 𝐒𝐭𝐨𝐫𝐲 : 𝐓𝐰𝐨 𝐟𝐫𝐢𝐞𝐧𝐝 𝐬𝐪𝐮𝐚𝐝𝐬 📱💬 — let's call them:
SquadSnap 😎 → nums1
SquadTok 🤳 → nums2
They’ve rated their fav selfie filters on a scale from -106 to 106 🔥 (yes, some people weirdly hate filters that much 😅).
Now both squads wanna combine their filter ratings and find the middle-most rating — the one that represents the vibe of the entire group 🧘‍♀️✨.That's what we call the median filter 📷.

🎯 𝐘𝐨𝐮𝐫 𝐆𝐨𝐚𝐥 : Write a function to find the middle filter rating when both squads combine their sorted ratings — but do it super fast ⚡ (not by just merging and sorting).

🧩 𝐈𝐧𝐩𝐮𝐭 : 𝐘𝐨𝐮 𝐠𝐞𝐭 𝐭𝐰𝐨 𝐬𝐨𝐫𝐭𝐞𝐝 𝐥𝐢𝐬𝐭𝐬 -
squad_snap = [1, 3]     # Sorted selfie filter ratings from Snap Squad
squad_tok = [2]         # Sorted selfie filter ratings from Tok Squad 

🧠 𝐖𝐡𝐚𝐭 𝐲𝐨𝐮 𝐡𝐚𝐯𝐞 𝐭𝐨 𝐝𝐨? → Combine both the lists into 1 vibe list 💫 → [1, 2, 3] :- Find the middle rating by following the below conditions
- If list is odd length, return the center one
- If it's even, return the average of the two middle ones

✅ 𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 :
📷 Example 1 : squad_snap = [1, 3] and squad_tok = [2]
Combined : [1, 2, 3] → Middle filter = 2.0 = Median 
📷 Example 2 : squad_snap = [1, 2] and squad_tok = [3, 4]
Combined : [1, 2, 3, 4] → Middle filters = 2 and 3 → Median = (2 + 3)/2 = 2.5

🧃 𝐑𝐮𝐥𝐞𝐬 𝐨𝐫 𝐂𝐨𝐧𝐬𝐭𝐫𝐚𝐢𝐧𝐭𝐬 :
→ You can have 0 to 1000 filters in each squad.
→ At least one squad should have filters (no dry parties).
→ Filter ratings can go from -106 (yuck) to 106 (slay).
→ No slow solutions – you’re a fast texter, be a fast coder too 🏎️
→ Target time: O(log(m + n))

💬 𝐓𝐋;𝐃𝐑 [ Too Long,Don't Read ] a.k.a [ small hint ] : Think of it as choosing the most balanced filter everyone in both squads can vibe with🧘‍♂️📷

Solutions or Different Methods to solve this problem :-
#Approach 1 : 𝐁𝐫𝐮𝐭𝐞 𝐅𝐨𝐫𝐜𝐞 𝐀𝐩𝐩𝐫𝐨𝐚𝐜𝐡 [ Time Complexity : O((m + n) * log(m + n)) ; Space Complexity : O(m + n) ]
𝐏𝐲𝐭𝐡𝐨𝐧 𝐋𝐚𝐧𝐠𝐮𝐚𝐠𝐞 :- 
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        merged = nums1 + nums2 # Merge the two arrays
        merged.sort() #Sorting the merged array 
        n = len(merged) # Finding the total number of elements
        if n % 2 == 1: #Check if the total number of the elements is odd
            return float(merged[n // 2]) #Odd Total number of elements which means there is only 1 single element in the middle therefore returning the middle element converting it to the float
        else:  #for even numbers there are two middle numbers : left middle and right middle
            mid1 = merged[n // 2] #right-middle
            mid2 = merged[n // 2 - 1] #left-middle
            return (mid1 + mid2) / 2
🎯 Example Walkthrough ( Dry running the Brute Force Approach ) :
For nums1 = [1, 2], nums2 = [3, 4]:
merged = [1, 2, 3, 4]
n = 4 → even
Median = (2 + 3) / 2 = 2.5

Now we are diving into the 𝐓𝐰𝐨 𝐏𝐨𝐢𝐧𝐭𝐞𝐫 𝐌𝐞𝐫𝐠𝐞 𝐀𝐩𝐩𝐫𝐨𝐚𝐜𝐡 , which is more efficient than brute force because:
✅ It avoids full sorting
✅ It tracks only up to the median
✅ It works in O(m + n) time
#Approach 2 : 𝐓𝐰𝐨 𝐏𝐨𝐢𝐧𝐭𝐞𝐫 𝐌𝐞𝐫𝐠𝐞 𝐖𝐢𝐭𝐡𝐨𝐮𝐭 𝐒𝐨𝐫𝐭𝐢𝐧𝐠 [ Time Complexity : O(m+n) ; Space Complexity : O(1) ]
𝐏𝐲𝐭𝐡𝐨𝐧 𝐋𝐚𝐧𝐠𝐮𝐚𝐠𝐞 :-
class Solution:
    def findMedianSortedArrays(self, nums1, nums2): #self	refers to the current instance of the class (W/o self errors will definitely come )
        m, n = len(nums1), len(nums2)
        total = m + n
        mid = total // 2 #always taking the floor function

        i = j = 0  # Pointers for nums1 and nums2
        prev = curr = 0  # To store the last two elements seen

        for _ in range(mid + 1): #_ really don’t care which round we’re on (_), just get me the middle!  
# We use mid + 1 because we need to walk up to and include the middle.
            prev = curr

            if i < m and (j >= n or nums1[i] < nums2[j]):  # Choose smaller current value from both arrays
                curr = nums1[i]
                i += 1
            else:
                curr = nums2[j]
                j += 1

        if total % 2 == 0:  # If total length is even → median = average of two middle values
            return (prev + curr) / 2
        else:  # If odd → median = middle value
            return curr * 1.0

#Approach 3 : Binary Search Partitioning [ Time Complexity : O(log(min(m, n))) ; Space  Complexity : O(1) ] 
𝐏𝐲𝐭𝐡𝐨𝐧 𝐋𝐚𝐧𝐠𝐮𝐚𝐠𝐞 :-
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
            nums1, nums2 = nums2, nums1 # Ensure nums1 is the smaller array
        if len(nums1) > len(nums2): #Swap nums1 and mums2 with each other
        m, n = len(nums1), len(nums2) 
        low, high = 0, m # low is the start of binary search range (min cut position in nums1) and high is the end of the binary search range ( max cut position in nums1 )

        while low <= high: #Now we are searching from low to high(Binary Search)
            i = (low + high) // 2 #Partition point (cut) in nums1	: "How many elements should go into the left half from nums1?"
            j = (m + n + 1) // 2 - i #Partition point (cut) in nums2 : "How many elements should go into the left half from nums2?"

            maxLeft1 = float('-inf') if i == 0 else nums1[i - 1]
            minRight1 = float('inf') if i == m else nums1[i]

            maxLeft2 = float('-inf') if j == 0 else nums2[j - 1]
            minRight2 = float('inf') if j == n else nums2[j] #Take maximum of left side and minimum of right side of both the arrays named nums1 and nums2

            if maxLeft1 <= minRight2 and maxLeft2 <= minRight1: #loop for returning the median element for the median of maxLeft and minRight
                # Found the correct partition
                if (m + n) % 2 == 0:
                    return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2
                else:
                    return max(maxLeft1, maxLeft2)  
            elif maxLeft1 > minRight2:
                high = i - 1
            else:
                low = i + 1

#Approach 4 : Recursive K-th Element Finder (Divide & Conquer) [ Time Complexity : O(log(m + n)) ; Space Complexity : O(log(m + n)) (due to recursion) ] 
𝐏𝐲𝐭𝐡𝐨𝐧 𝐋𝐚𝐧𝐠𝐮𝐚𝐠𝐞 :-
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        def getKthElement(arr1, arr2, k):
            index1 = index2 = 0
            while True:
                if index1 == len(arr1):
                    return arr2[index2 + k - 1]
                if index2 == len(arr2):
                    return arr1[index1 + k - 1]
                if k == 1:
                    return min(arr1[index1], arr2[index2])

                newIndex1 = min(index1 + k // 2 - 1, len(arr1) - 1)
                newIndex2 = min(index2 + k // 2 - 1, len(arr2) - 1)
                pivot1, pivot2 = arr1[newIndex1], arr2[newIndex2]

                if pivot1 <= pivot2:
                    k -= (newIndex1 - index1 + 1)
                    index1 = newIndex1 + 1
                else:
                    k -= (newIndex2 - index2 + 1)
                    index2 = newIndex2 + 1

        totalLength = len(nums1) + len(nums2)
        if totalLength % 2 == 1:
            return getKthElement(nums1, nums2, totalLength // 2 + 1)
        else:
            return (getKthElement(nums1, nums2, totalLength // 2) +
                    getKthElement(nums1, nums2, totalLength // 2 + 1)) / 2
